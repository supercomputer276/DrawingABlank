<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>debugString = "";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///update view
event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DEBUG: input check string

/*debugString = "";
if(input_check(input.move_left)) debugString = "LEFT";
if(input_check(input.move_right)) debugString = "RIGHT";
if(input_check(input.move_up)) debugString = "UP";
if(input_check(input.move_down)) debugString = "DOWN";
if(input_check(input.action_primary)) debugString = "BUT. A";
if(input_check(input.action_secondary)) debugString = "BUT. B";
if(input_check(input.brush_draw)) debugString = "DRAW";
if(input_check(input.brush_flickpress)) debugString = "FLICK";
*/
debugString = TMCT_GetSegment(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///update which screen the player's on (standard)
var currXview = view_xview[0],
    currYview = view_yview[0];
if(instance_exists(obj_player))
{
    view_xview[0] = median(0,
        floor(obj_player.x/view_wview[0])*view_wview[0],
        room_width-view_wview[0]);
    view_yview[0] = median(0,
        floor(obj_player.y/view_hview[0])*view_hview[0],
        room_height-view_hview[0]);
}
//actions to perform if the screen is different from the last screen
if(view_xview[0] != currXview || view_yview[0] != currYview) {
    //
    show_debug_message("Screen change");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_perform(ev_step,ev_step_begin);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///tint the screen while drawing
if(instance_exists(obj_drawmark)) {
    draw_set_alpha(0.5);
    draw_rectangle_colour(0,0,_gui_width,_gui_height,
        c_white,c_white,c_white,c_white,false);
    draw_set_alpha(1);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw HUD
var hudX = 8, hudY = 8;
var hudString = "";
//assemblue HUD display
//vitality
hudString += getSpecialCharacter(specialCharacter.heart_full);
if(currentHealth &lt; 100) hudString += "0";
if(currentHealth &lt; 10) hudString += "0";
hudString += string(currentHealth);
//blots
hudString += "#";
if(currentBlots &lt; 100) hudString += "B";
if(currentBlots &lt; 10) hudString += "0";
hudString += string(currentBlots);
if(refillBlots &gt; 0) {
    if(refillBlots &lt; 100) hudString += chr(specialCharacter.arrow_left);
    if(refillBlots &lt; 10) hudString += "0";
    hudString += string(refillBlots);
}
//brush (header)
hudString += "#" + getSpecialCharacter(specialCharacter.brush);
//DEBUG
hudString += "##" + debugString;
//draw HUD
draw_sprite_string_color(spr_font,hudX+1,hudY+1,hudString,c_black,1);
draw_sprite_string_color(spr_font,hudX,hudY,hudString,c_white,1);
//draw brush meter
var dacurrBrush = currentBrush;
for(var i = 0; i &lt; maxBrush div 8; i++) {
    draw_sprite_string_color(spr_font,hudX+1+8+(8*i),hudY+1+8+8,
        getSpecialCharacter(specialCharacter.meter_8),c_black,1);
    var marker, col;
    if(dacurrBrush &gt;= 8) marker = 8;
    else marker = dacurrBrush;
    marker = max(specialCharacter.meter_0 + marker, specialCharacter.meter_0);
    col = c_white;
    if(instance_exists(obj_brush))
        if(obj_brush.deadBrush)
            col = $7C7C7C;
    draw_sprite_string_color(spr_font,hudX+8+(8*i),hudY+8+8,
        chr(marker),col,1);
    dacurrBrush -= 8;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
