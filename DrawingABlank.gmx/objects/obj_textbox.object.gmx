<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_textboxmarker</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///set up variables
text = "";
//the text to display
width = 0;
//how much space for characters inside the box (not counting the border)
height = 0;
//how much space for characters inside the box (not counting the border)
frame = spr_textborder;
//what frame to use
color = c_white;
//base color for text in this box

targetWidth = 0;
targetHeight = 0;
//what dimensions to adjust to
effectiveX = x;
effectiveY = y;
//drawing center to compensate for being off-center with odd number of rows or columns
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///adjust box size to destination
if(height != targetHeight) {
    if(height &lt; targetHeight) height++;
    else height--;
}
else if(width != targetWidth) {
    if(width &lt; targetWidth) width++;
    else width--;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///line up to background
move_snap(8,8);

if(width mod 2 == 1) effectiveX = x - 4;
else effectiveX = x;
if(height mod 2 == 1) effectiveY = y - 4;
else effectiveY = y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw textbox
//get frame dimensions
var pieceWidth = sprite_get_width(frame),
    pieceHeight = sprite_get_height(frame);
var frameWidth = width * pieceWidth,
    frameHeight = height * pieceHeight;
var frameX = effectiveX - (frameWidth / 2),
    frameY = effectiveY - (frameHeight / 2);
//draw frame
if(frame != noone) {
    draw_sprite_stretched(frame,4,frameX,frameY,frameWidth,frameHeight);
    draw_sprite(frame,0,frameX-pieceWidth,frameY-pieceHeight);
    draw_sprite(frame,2,frameX+frameWidth,frameY-pieceHeight);
    draw_sprite(frame,6,frameX-pieceWidth,frameY+frameHeight);
    draw_sprite(frame,8,frameX+frameWidth,frameY+frameHeight);
    for(var i = 0; i &lt; width; i++) {
        draw_sprite(frame,1,frameX+i*pieceWidth,frameY-pieceHeight);
        draw_sprite(frame,7,frameX+i*pieceWidth,frameY+frameHeight);
    }
    for(var i = 0; i &lt; height; i++) {
        draw_sprite(frame,3,frameX-pieceWidth,frameY+i*pieceHeight);
        draw_sprite(frame,5,frameX+frameWidth,frameY+i*pieceHeight);
    }
}
//draw text if the dimensions fit
if(height == targetHeight &amp;&amp; width == targetWidth) {
    draw_sprite_string_ext_color(spr_font,frameX,frameY,text,
        0,width,
        color,1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
