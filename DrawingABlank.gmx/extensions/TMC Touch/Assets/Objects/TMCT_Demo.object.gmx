<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draws gestures when set</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//training hack
if(os_type  == os_windows) 
{
    if(clipboard_has_text())
    {
        show_message("Training Code is in the clipboard");
    }
   
}

TMCT_Destroy();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//you dont need these 2 lines in your game
last_valid_shape =""; //shape to draw for demo
training_map = ds_map_create(); //shape rememberd in training
/////////////

TMCT_Init();
//add shapes
TMCT_AddGesture("SQUARE","0642",true);
TMCT_AddGesture("SQUARE","4602",true);
TMCT_AddGesture("RIGHT","0",false);
TMCT_AddGesture("LEFT","4",false);
TMCT_AddGesture("UP","2",false);
TMCT_AddGesture("DOWN","6",false);
TMCT_AddGesture("RUNJUMPL","3",false);
TMCT_AddGesture("RUNJUMPR","1",false);
TMCT_AddGesture("L","60",false);
//the circle was generated with the demo, Yes I went all out on the circle
TMCT_AddGesture("CIRCLE","45670123",true);
TMCT_AddGesture("CIRCLE","07654321",true);
TMCT_AddGesture("CIRCLE","07643210",true);
TMCT_AddGesture("CIRCLE","064210",true);
TMCT_AddGesture("CIRCLE","7654210",true);
TMCT_AddGesture("CIRCLE","765410",true);
TMCT_AddGesture("CIRCLE","0754210",true);
TMCT_AddGesture("CIRCLE","7654310",true);
TMCT_AddGesture("CIRCLE","076543210",true);
TMCT_AddGesture("CIRCLE","07654320",true);
TMCT_AddGesture("CIRCLE","07654310",true);
TMCT_AddGesture("CIRCLE","0654210",true);
TMCT_AddGesture("CIRCLE","07654210",true);
TMCT_AddGesture("CIRCLE","4560134",true);
TMCT_AddGesture("CIRCLE","4570134",true);
TMCT_AddGesture("CIRCLE","5602345",true);
TMCT_AddGesture("CIRCLE","560134",true);
TMCT_AddGesture("CIRCLE","45701234",true);
TMCT_AddGesture("CIRCLE","4570124",true);
TMCT_AddGesture("CIRCLE","4560234",true);
TMCT_AddGesture("CIRCLE","4670234",true);
TMCT_AddGesture("CIRCLE","4570234",true);
TMCT_AddGesture("CIRCLE","456701234",true);
TMCT_AddGesture("CIRCLE","457134",true);
TMCT_AddGesture("CIRCLE","45670134",true);
TMCT_AddGesture("CIRCLE","45670234",true);
TMCT_AddGesture("CIRCLE","45601234",true);
TMCT_AddGesture("CIRCLE","5670234",true);
TMCT_AddGesture("CIRCLE","075432",true);
TMCT_AddGesture("CIRCLE","1065432",true);
TMCT_AddGesture("CIRCLE","0754321",true);
TMCT_AddGesture("CIRCLE","07653210",true);
TMCT_AddGesture("CIRCLE","76520",true);
TMCT_AddGesture("CIRCLE","07643",true);
TMCT_AddGesture("CIRCLE","1065431",true);
TMCT_AddGesture("CIRCLE","06543210",true);
TMCT_AddGesture("CIRCLE","064321",true);
TMCT_AddGesture("CIRCLE","0643210",true);
TMCT_AddGesture("CIRCLE","0764210",true);
TMCT_AddGesture("CIRCLE","075431",true);
TMCT_AddGesture("CIRCLE","065432",true);
TMCT_AddGesture("CIRCLE","075321",true);
TMCT_AddGesture("CIRCLE","0653",true);
TMCT_AddGesture("CIRCLE","0754320",true);
TMCT_AddGesture("CIRCLE","076421",true);
TMCT_AddGesture("CIRCLE","06532",true);
TMCT_AddGesture("CIRCLE","4570",true);
TMCT_AddGesture("CIRCLE","456702",true);
TMCT_AddGesture("CIRCLE","467012",true);
TMCT_AddGesture("CIRCLE","45702",true);
TMCT_AddGesture("CIRCLE","46703",true);
TMCT_AddGesture("CIRCLE","47023",true);
TMCT_AddGesture("CIRCLE","467023",true);
TMCT_AddGesture("CIRCLE","457023",true);
TMCT_AddGesture("CIRCLE","467013",true);
TMCT_AddGesture("CIRCLE","467134",true);
TMCT_AddGesture("CIRCLE","456012",true);
TMCT_AddGesture("CIRCLE","4670124",true);
TMCT_AddGesture("CIRCLE","457013",true);
TMCT_AddGesture("CIRCLE","45671234",true);
TMCT_AddGesture("CIRCLE","56023",true);
TMCT_AddGesture("CIRCLE","57034",true);
TMCT_AddGesture("CIRCLE","076532",true);
TMCT_AddGesture("CIRCLE","76432",true);
TMCT_AddGesture("CIRCLE","764320",true);
TMCT_AddGesture("CIRCLE","765431",true);
TMCT_AddGesture("CIRCLE","075420",true);
TMCT_AddGesture("CIRCLE","76420",true);
TMCT_AddGesture("CIRCLE","0654320",true);
TMCT_AddGesture("CIRCLE","765310",true);
TMCT_AddGesture("CIRCLE","0764321",true);
TMCT_AddGesture("CIRCLE","065320",true);
TMCT_AddGesture("CIRCLE","0764310",true);
TMCT_AddGesture("CIRCLE","075310",true);
TMCT_AddGesture("CIRCLE","0753",true);
TMCT_AddGesture("CIRCLE","07653",true);
TMCT_AddGesture("CIRCLE","76421",true);
TMCT_AddGesture("CIRCLE","065421",true);
TMCT_AddGesture("CIRCLE","0654310",true);
TMCT_AddGesture("CIRCLE","076431",true);
TMCT_AddGesture("CIRCLE","075421",true);
TMCT_AddGesture("CIRCLE","06542",true);
TMCT_AddGesture("CIRCLE","0765432",true);
TMCT_AddGesture("CIRCLE","06543",true);
TMCT_AddGesture("CIRCLE","064310",true);
TMCT_AddGesture("CIRCLE","0621",true);
TMCT_AddGesture("CIRCLE","076432",true);
TMCT_AddGesture("CIRCLE","065431",true);
TMCT_AddGesture("CIRCLE","07543210",true);
TMCT_AddGesture("CIRCLE","76532",true);
TMCT_AddGesture("CIRCLE","764321",true);
TMCT_AddGesture("CIRCLE","0754310",true);
TMCT_AddGesture("CIRCLE","76543",true);
TMCT_AddGesture("CIRCLE","065321",true);
TMCT_AddGesture("CIRCLE","467124",true);
TMCT_AddGesture("CIRCLE","457024",true);
TMCT_AddGesture("CIRCLE","467024",true);
TMCT_AddGesture("CIRCLE","460234",true);
TMCT_AddGesture("CIRCLE","460124",true);
TMCT_AddGesture("CIRCLE","4712",true);
TMCT_AddGesture("CIRCLE","56024",true);
TMCT_AddGesture("CIRCLE","46713",true);
TMCT_AddGesture("CIRCLE","56013",true);
TMCT_AddGesture("CIRCLE","457034",true);
TMCT_AddGesture("CIRCLE","46023",true);
TMCT_AddGesture("CIRCLE","467034",true);
TMCT_AddGesture("CIRCLE","456024",true);
TMCT_AddGesture("CIRCLE","4567012",true);
TMCT_AddGesture("CIRCLE","4670134",true);
TMCT_AddGesture("CIRCLE","45602",true);
TMCT_AddGesture("CIRCLE","567023",true);
TMCT_AddGesture("CIRCLE","4670123",true);
TMCT_AddGesture("CIRCLE","46702",true);
TMCT_AddGesture("CIRCLE","567124",true);
TMCT_AddGesture("CIRCLE","5603",true);
TMCT_AddGesture("CIRCLE","456023",true);
TMCT_AddGesture("CIRCLE","46712",true);
TMCT_AddGesture("CIRCLE","670123",true);
TMCT_AddGesture("CIRCLE","57013",true);
TMCT_AddGesture("CIRCLE","5671",true);
TMCT_AddGesture("CIRCLE","5702",true);
TMCT_AddGesture("CIRCLE","56713",true);
TMCT_AddGesture("CIRCLE","5670",true);
TMCT_AddGesture("CIRCLE","5703",true);
TMCT_AddGesture("CIRCLE","07532",true);
TMCT_AddGesture("CIRCLE","654320764",true);
TMCT_AddGesture("CIRCLE","754321",true);
TMCT_AddGesture("CIRCLE","76531",true);
TMCT_AddGesture("CIRCLE","76431",true);
TMCT_AddGesture("CIRCLE","76542",true);
TMCT_AddGesture("CIRCLE","65432",true);
TMCT_AddGesture("CIRCLE","7654321",true);
TMCT_AddGesture("CIRCLE","765432",true);
TMCT_AddGesture("CIRCLE","7642",true);
TMCT_AddGesture("CIRCLE","765420",true);
TMCT_AddGesture("CIRCLE","06531",true);
TMCT_AddGesture("CIRCLE","06431",true);
TMCT_AddGesture("CIRCLE","45702345",true);
TMCT_AddGesture("CIRCLE","45701",true);
TMCT_AddGesture("CIRCLE","457012",true);
TMCT_AddGesture("CIRCLE","567123",true);
TMCT_AddGesture("CIRCLE","57023",true);
TMCT_AddGesture("CIRCLE","567134",true);
TMCT_AddGesture("CIRCLE","0765320",true);
TMCT_AddGesture("CIRCLE","75432",true);
TMCT_AddGesture("CIRCLE","75421",true);
TMCT_AddGesture("CIRCLE","05431",true);
TMCT_AddGesture("CIRCLE","560123",true);
TMCT_AddGesture("CIRCLE","45034",true);
TMCT_AddGesture("CIRCLE","56034",true);
TMCT_AddGesture("CIRCLE","5670134",true);
TMCT_AddGesture("CIRCLE","456034",true);
TMCT_AddGesture("CIRCLE","4567124",true);
TMCT_AddGesture("CIRCLE","4560124",true);
TMCT_AddGesture("CIRCLE","4560123",true);

TMCT_AddGesture("CIRCLE","32076543",true);
TMCT_AddGesture("CIRCLE","32106543",true);
TMCT_AddGesture("CIRCLE","321064",true);
TMCT_AddGesture("CIRCLE","32107643",true);
TMCT_AddGesture("CIRCLE","3217654",true);
TMCT_AddGesture("CIRCLE","320754",true);
TMCT_AddGesture("CIRCLE","310764",true);
TMCT_AddGesture("CIRCLE","3210754",true);
TMCT_AddGesture("CIRCLE","42107654",true);
TMCT_AddGesture("CIRCLE","4210654",true);
TMCT_AddGesture("CIRCLE","43210654",true);
TMCT_AddGesture("CIRCLE","3210654",true);
TMCT_AddGesture("CIRCLE","3217543",true);
TMCT_AddGesture("CIRCLE","3210643",true);
TMCT_AddGesture("CIRCLE","32107654",true);
TMCT_AddGesture("CIRCLE","3210764",true);
TMCT_AddGesture("CIRCLE","4310754",true);
TMCT_AddGesture("CIRCLE","4320764",true);
TMCT_AddGesture("CIRCLE","3217643",true);
TMCT_AddGesture("CIRCLE","4210754",true);
TMCT_AddGesture("CIRCLE","421065",true);
TMCT_AddGesture("CIRCLE","0134670",true);
TMCT_AddGesture("CIRCLE","024560",true);
TMCT_AddGesture("CIRCLE","013457",true);
TMCT_AddGesture("CIRCLE","0135670",true);
TMCT_AddGesture("CIRCLE","123467",true);
TMCT_AddGesture("CIRCLE","0234560",true);
TMCT_AddGesture("CIRCLE","124570",true);
TMCT_AddGesture("CIRCLE","1234570",true);
TMCT_AddGesture("CIRCLE","01245670",true);
TMCT_AddGesture("CIRCLE","1234670",true);
TMCT_AddGesture("CIRCLE","02347",true);
TMCT_AddGesture("CIRCLE","134670",true);
TMCT_AddGesture("CIRCLE","034570",true);
TMCT_AddGesture("CIRCLE","023471",true);
TMCT_AddGesture("CIRCLE","023460",true);
TMCT_AddGesture("CIRCLE","0124567",true);
TMCT_AddGesture("CIRCLE","065321",true);
TMCT_AddGesture("CIRCLE","065421",true);
TMCT_AddGesture("CIRCLE","76542",true);
TMCT_AddGesture("CIRCLE","0765421",true);
TMCT_AddGesture("CIRCLE","06542",true);
TMCT_AddGesture("CIRCLE","765320",true);
TMCT_AddGesture("CIRCLE","765431",true);
TMCT_AddGesture("CIRCLE","0654310",true);
TMCT_AddGesture("CIRCLE","05431",true);
TMCT_AddGesture("CIRCLE","07543",true);
TMCT_AddGesture("CIRCLE","76532",true);
TMCT_AddGesture("CIRCLE","065431",true);
TMCT_AddGesture("CIRCLE","076532",true);
TMCT_AddGesture("CIRCLE","560234",true);
TMCT_AddGesture("CIRCLE","560123",true);
TMCT_AddGesture("CIRCLE","567234",true);
TMCT_AddGesture("CIRCLE","4670234",true);
TMCT_AddGesture("CIRCLE","4570134",true);
TMCT_AddGesture("CIRCLE","467023",true);
TMCT_AddGesture("CIRCLE","560124",true);
TMCT_AddGesture("CIRCLE","567124",true);
TMCT_AddGesture("CIRCLE","45670234",true);
TMCT_AddGesture("CIRCLE","4567034",true);
TMCT_AddGesture("CIRCLE","56023",true);
TMCT_AddGesture("CIRCLE","4567023",true);
TMCT_AddGesture("CIRCLE","57034",true);
TMCT_AddGesture("CIRCLE","4570234",true);
TMCT_AddGesture("CIRCLE","5601234",true);
TMCT_AddGesture("CIRCLE","570234",true);
TMCT_AddGesture("CIRCLE","56713",true);
TMCT_AddGesture("CIRCLE","560134",true);
TMCT_AddGesture("CIRCLE","5670234",true);
TMCT_AddGesture("CIRCLE","5670134",true);
TMCT_AddGesture("CIRCLE","570134",true);
TMCT_AddGesture("CIRCLE","67023",true);
TMCT_AddGesture("CIRCLE","56712",true);
TMCT_AddGesture("CIRCLE","467013",true);
TMCT_AddGesture("CIRCLE","567123",true);
TMCT_AddGesture("CIRCLE","567023",true);
TMCT_AddGesture("CIRCLE","56012",true);
TMCT_AddGesture("CIRCLE","5702",true);
TMCT_AddGesture("CIRCLE","57023",true);
TMCT_AddGesture("CIRCLE","567034",true);
TMCT_AddGesture("CIRCLE","56024",true);
TMCT_AddGesture("CIRCLE","567134",true);
TMCT_AddGesture("CIRCLE","5713",true);
TMCT_AddGesture("CIRCLE","46713",true);
TMCT_AddGesture("CIRCLE","123467",true);
TMCT_AddGesture("CIRCLE","023567",true);
TMCT_AddGesture("CIRCLE","432075",true);
TMCT_AddGesture("CIRCLE","320764",true);
TMCT_AddGesture("CIRCLE","1234567",true);
TMCT_AddGesture("CIRCLE","320765",true);
TMCT_AddGesture("CIRCLE","0234567",true);
TMCT_AddGesture("CIRCLE","1234670",true);
TMCT_AddGesture("CIRCLE","32064",true);
TMCT_AddGesture("CIRCLE","123567",true);
TMCT_AddGesture("CIRCLE","3107654",true);
TMCT_AddGesture("CIRCLE","0124567",true);
TMCT_AddGesture("CIRCLE","012467",true);
TMCT_AddGesture("CIRCLE","32107654",true);
TMCT_AddGesture("CIRCLE","01234670",true);
TMCT_AddGesture("CIRCLE","124670",true);
TMCT_AddGesture("CIRCLE","32065",true);
TMCT_AddGesture("CIRCLE","134560",true);
TMCT_AddGesture("CIRCLE","432065",true);
TMCT_AddGesture("CIRCLE","01235670",true);
TMCT_AddGesture("CIRCLE","3210765",true);
TMCT_AddGesture("CIRCLE","0124670",true);
TMCT_AddGesture("CIRCLE","310764",true);
TMCT_AddGesture("CIRCLE","0123467",true);
TMCT_AddGesture("CIRCLE","3207654",true);
TMCT_AddGesture("CIRCLE","0134570",true);
TMCT_AddGesture("CIRCLE","432107654",true);
TMCT_AddGesture("CIRCLE","01234567",true);
TMCT_AddGesture("CIRCLE","321065",true);
TMCT_AddGesture("CIRCLE","013467",true);
TMCT_AddGesture("CIRCLE","310765",true);
TMCT_AddGesture("CIRCLE","0134567",true);
TMCT_AddGesture("CIRCLE","3210654",true);
TMCT_AddGesture("CIRCLE","310654",true);
TMCT_AddGesture("CIRCLE","134570",true);
TMCT_AddGesture("CIRCLE","45701234",true);
TMCT_AddGesture("CIRCLE","0765421",true);
TMCT_AddGesture("CIRCLE","765431",true);
TMCT_AddGesture("CIRCLE","5670134",true);
TMCT_AddGesture("CIRCLE","065431",true);
TMCT_AddGesture("CIRCLE","46701234",true);
TMCT_AddGesture("CIRCLE","567023",true);
TMCT_AddGesture("CIRCLE","064310",true);
TMCT_AddGesture("CIRCLE","57034",true);
TMCT_AddGesture("CIRCLE","765310",true);
TMCT_AddGesture("CIRCLE","467024",true);
TMCT_AddGesture("CIRCLE","7654320",true);
TMCT_AddGesture("CIRCLE","7654310",true);
TMCT_AddGesture("CIRCLE","45702",true);
TMCT_AddGesture("CIRCLE","4560234",true);
TMCT_AddGesture("CIRCLE","45670134",true);
TMCT_AddGesture("CIRCLE","46701234",true);
TMCT_AddGesture("CIRCLE","45601234",true);
TMCT_AddGesture("CIRCLE","456701234",true);
TMCT_AddGesture("CIRCLE","45670",true);
TMCT_AddGesture("CIRCLE","45701",true);
TMCT_AddGesture("CIRCLE","57013",true);
TMCT_AddGesture("CIRCLE","5601234",true);
TMCT_AddGesture("CIRCLE","56713",true);
TMCT_AddGesture("CIRCLE","5602",true);
TMCT_AddGesture("CIRCLE","570134",true);
TMCT_AddGesture("CIRCLE","76542",true);
TMCT_AddGesture("CIRCLE","6542",true);
TMCT_AddGesture("CIRCLE","7654321",true);
TMCT_AddGesture("CIRCLE","5601",true);
TMCT_AddGesture("CIRCLE","5702",true);
TMCT_AddGesture("CIRCLE","57023",true);
TMCT_AddGesture("CIRCLE","570124",true);
TMCT_AddGesture("CIRCLE","076542",true);
TMCT_AddGesture("CIRCLE","765431",true);
TMCT_AddGesture("CIRCLE","754210",true);
TMCT_AddGesture("CIRCLE","076421",true);
TMCT_AddGesture("CIRCLE","7643",true);
TMCT_AddGesture("CIRCLE","7653210",true);
TMCT_AddGesture("CIRCLE","65421",true);
TMCT_AddGesture("CIRCLE","0764320",true);
TMCT_AddGesture("CIRCLE","560134",true);
TMCT_AddGesture("CIRCLE","567024",true);
TMCT_AddGesture("CIRCLE","024670",true);
TMCT_AddGesture("CIRCLE","134671",true);
TMCT_AddGesture("CIRCLE","0234670",true);
TMCT_AddGesture("CIRCLE","012467",true);
TMCT_AddGesture("CIRCLE","12467",true);
TMCT_AddGesture("CIRCLE","023467",true);
TMCT_AddGesture("CIRCLE","12457",true);
TMCT_AddGesture("CIRCLE","57024",true);
TMCT_AddGesture("CIRCLE","567124",true);
TMCT_AddGesture("CIRCLE","4670134",true);
TMCT_AddGesture("CIRCLE","4570134",true);
TMCT_AddGesture("CIRCLE","4570234",true);
TMCT_AddGesture("CIRCLE","4570124",true);
TMCT_AddGesture("CIRCLE","56034",true);
TMCT_AddGesture("CIRCLE","4560134",true);
TMCT_AddGesture("CIRCLE","0654310",true);
TMCT_AddGesture("CIRCLE","0654210",true);
TMCT_AddGesture("CIRCLE","07543210",true);
TMCT_AddGesture("CIRCLE","07654210",true);
TMCT_AddGesture("CIRCLE","0765310",true);
TMCT_AddGesture("CIRCLE","765320",true);
TMCT_AddGesture("CIRCLE","76521",true);
TMCT_AddGesture("CIRCLE","7654310",true);
TMCT_AddGesture("CIRCLE","065210",true);
TMCT_AddGesture("CIRCLE","0654321",true);
TMCT_AddGesture("CIRCLE","560234",true);
TMCT_AddGesture("CIRCLE","7654210",true);
TMCT_AddGesture("CIRCLE","460134",true);





//clear for the training demo option
if(os_type  == os_windows) clipboard_set_text(""); 
keyboard_string = ""

exit;
//Alphabet (Got through training running the demo)
TMCT_AddGesture("A","17",false);
TMCT_AddGesture("A","16",false);
TMCT_AddGesture("A","167",false);
TMCT_AddGesture("A","2767",false);
TMCT_AddGesture("A","1767",false);
TMCT_AddGesture("A","216",false);
TMCT_AddGesture("A","21263",false);
TMCT_AddGesture("A","2163",false);
TMCT_AddGesture("A","276234",false);
TMCT_AddGesture("A","126",false);
TMCT_AddGesture("A","217634",false);
TMCT_AddGesture("A","267",false);
TMCT_AddGesture("A","16",false);
TMCT_AddGesture("A","2167",false);
TMCT_AddGesture("A","163",false);
TMCT_AddGesture("A","21734",false);
TMCT_AddGesture("A","216234",false);
TMCT_AddGesture("A","2673",false);
TMCT_AddGesture("A","1624",false);
TMCT_AddGesture("A","1263234",false);
TMCT_AddGesture("B","1076540654",false);
TMCT_AddGesture("B","06540654",false);
TMCT_AddGesture("B","62106540654",false);
TMCT_AddGesture("B","217654076543",false);
TMCT_AddGesture("B","621765407654",false);
TMCT_AddGesture("B","210654076543",false);
TMCT_AddGesture("B","621065430654",false);
TMCT_AddGesture("B","21065407654",false);
TMCT_AddGesture("c","45670",false);
TMCT_AddGesture("D","62107654",false);
TMCT_AddGesture("D","6207654",false);
TMCT_AddGesture("D","20767654",false);
TMCT_AddGesture("D","620765454",false);
TMCT_AddGesture("E","467045670",false);
TMCT_AddGesture("E","456704670",false);
TMCT_AddGesture("E","46204670",false);
TMCT_AddGesture("E","4620460",false);
TMCT_AddGesture("E","0123456701",false);
TMCT_AddGesture("E","01234567010",false);
TMCT_AddGesture("E","012345670",false);
TMCT_AddGesture("F","21045670",false);
TMCT_AddGesture("F","2107",false);
TMCT_AddGesture("F","4620",false);
TMCT_AddGesture("F","46046",false);
TMCT_AddGesture("G","45670124",false);
TMCT_AddGesture("G","45670134",false);
TMCT_AddGesture("H","621076",false);
TMCT_AddGesture("H","62176",false);
TMCT_AddGesture("I","6",false);
TMCT_AddGesture("J","632",false);
TMCT_AddGesture("J","65432",false);
TMCT_AddGesture("J","6432",false);
TMCT_AddGesture("K","621567",false);
TMCT_AddGesture("K","762105670",false);
TMCT_AddGesture("K","7621567",false);
TMCT_AddGesture("K","62157",false);
TMCT_AddGesture("K","62154507",false);
TMCT_AddGesture("K","6215457",false);
TMCT_AddGesture("L","60",false);
TMCT_AddGesture("M","2676126",false);
TMCT_AddGesture("M","276716",false);
TMCT_AddGesture("M","21716",false);
TMCT_AddGesture("M","1267016",false);
TMCT_AddGesture("M","27616",false);
TMCT_AddGesture("M","276216",false);
TMCT_AddGesture("N","26762",false);
TMCT_AddGesture("N","2167621",false);
TMCT_AddGesture("N","21621",false);
TMCT_AddGesture("O","4567012340",false);
TMCT_AddGesture("O","34567012347",false);
TMCT_AddGesture("O","456701234",false);
TMCT_AddGesture("P","6217654",false);
TMCT_AddGesture("P","6210654",false);
TMCT_AddGesture("P","632107676543",false);
TMCT_AddGesture("P","621076543",false);
TMCT_AddGesture("P","62107654",false);
TMCT_AddGesture("P","6210765432",false);
TMCT_AddGesture("Q","456701234567",false);
TMCT_AddGesture("Q","4567012345670",false);
TMCT_AddGesture("Q","4567012",false);
TMCT_AddGesture("Q","45670",false);
TMCT_AddGesture("Q","456701245670",false);
TMCT_AddGesture("Q","123456701234670",false);
TMCT_AddGesture("R","62107654327",false);
TMCT_AddGesture("R","6210765476",false);
TMCT_AddGesture("R","621076547",false);
TMCT_AddGesture("S","4567076543",false);
TMCT_AddGesture("S","4567654",false);
TMCT_AddGesture("S","4670654",false);
TMCT_AddGesture("S","45676543",false);
TMCT_AddGesture("T","046",false);
TMCT_AddGesture("T","6230",false);
TMCT_AddGesture("T","6240",false);
TMCT_AddGesture("T","62140",false);
TMCT_AddGesture("T","0476",false);
TMCT_AddGesture("U","670126",false);
TMCT_AddGesture("U","67016",false);
TMCT_AddGesture("U","6701267",false);
TMCT_AddGesture("V","7621",false);
TMCT_AddGesture("V","761",false);
TMCT_AddGesture("V","71",false);
TMCT_AddGesture("V","76712",false);
TMCT_AddGesture("V","61",false);
TMCT_AddGesture("W","761612",false);
TMCT_AddGesture("W","670167121",false);
TMCT_AddGesture("W","7171",false);
TMCT_AddGesture("W","6161",false);
TMCT_AddGesture("W","6217621",false);
TMCT_AddGesture("X","70245",false);
TMCT_AddGesture("X","7145",false);
TMCT_AddGesture("X","72145",false);
TMCT_AddGesture("X","67245",false);
TMCT_AddGesture("X","671245",false);
TMCT_AddGesture("X","7012345",false);
TMCT_AddGesture("X","701234565",false);
TMCT_AddGesture("X","670125",false);
TMCT_AddGesture("X","7245",false);
TMCT_AddGesture("X","70123454",false);
TMCT_AddGesture("Y","6701262",false);
TMCT_AddGesture("Y","601262",false);
TMCT_AddGesture("Y","6701265",false);
TMCT_AddGesture("Y","6165",false);
TMCT_AddGesture("Y","601",false);
TMCT_AddGesture("Y","65",false);
TMCT_AddGesture("Y","67012656",false);
TMCT_AddGesture("Y","670126",false);
TMCT_AddGesture("Y","671265",false);
TMCT_AddGesture("Z","050",false);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>application_surface_enable(false);
///Handling of gestures
///////////////////////////////////////////////
//get the gesture details
TMCT_OnStep();
//Set the gesture name found on the device
//I decided to leave the usage of TMCT_SetDeviceGesture to you
TMCT_SetDeviceGesture(0,TMCT_SegmentToGestureName( TMCT_GetSegment(0)));
TMCT_SetDeviceGesture(1,TMCT_SegmentToGestureName( TMCT_GetSegment(1)));
TMCT_SetDeviceGesture(2,TMCT_SegmentToGestureName( TMCT_GetSegment(2)));
TMCT_SetDeviceGesture(3,TMCT_SegmentToGestureName( TMCT_GetSegment(3)));

//equivalend code
/*
var Gesture0 = TMCT_SegmentToGestureName( TMCT_GetSegment(0));
var Gesture1 = TMCT_SegmentToGestureName( TMCT_GetSegment(1));
var Gesture2 = TMCT_SegmentToGestureName( TMCT_GetSegment(2));
var Gesture3 = TMCT_SegmentToGestureName( TMCT_GetSegment(3));
//store the last valid found
if(Gesture0 != "")
{
    LastGesture0 = Gesture0;
}
if(Gesture1 != "")
{
    LastGesture1 = Gesture1;
}
if(Gesture2 != "")
{
    LastGesture2 = Gesture2;
}
if(Gesture3 != "")
{
    LastGesture3 = Gesture3;
}
*/

//check for the gesture end (mouse release on 0,1,2,3 devices)
dev0Up = 0;
dev1Up = 0;
dev2Up = 0;
dev3Up = 0;
if(device_mouse_check_button_released(0,mb_any)) dev0Up = 1;
if(device_mouse_check_button_released(1,mb_any)) dev1Up = 1;
if(device_mouse_check_button_released(2,mb_any)) dev2Up = 1;
if(device_mouse_check_button_released(3,mb_any)) dev3Up = 1;
///////////////////////////////////////////////

///////////////////////////////////////////////
//Your handling starts here
//debug
s = "";
s+="Dev 0 Last Gesture: " + TMCT_GetLastGesture(0);
s+=" Dev 0 Gesture: " + TMCT_GetCurrentGesture(0);
s+=" Dev 0 Segments: " + TMCT_GetSegment(0);
s+="#"
s+="Dev 1 Last Gesture: " + TMCT_GetLastGesture(1);
s+=" Dev 1 Gesture: " + TMCT_GetCurrentGesture(1);
s+=" Dev 1 Segments: " + TMCT_GetSegment(1);
s+="#"
s+="Dev 2 Last Gesture: " + TMCT_GetLastGesture(2);
s+=" Dev 2 Gesture: " + TMCT_GetCurrentGesture(2);
s+=" Dev 2 Segments: " + TMCT_GetSegment(2);
s+="#"
s+="Dev 3 Last Gesture: " + TMCT_GetLastGesture(3);
s+=" Dev 3 Gesture: " + TMCT_GetCurrentGesture(3);
s+=" Dev 3 Segments: " + TMCT_GetSegment(3);
s+="#"
s+="Training For (Type Name): " + keyboard_string;
s+="#"
draw_set_color(c_green)

draw_set_halign(fa_center)
draw_set_valign(fa_bottom)
draw_text(room_width/2,room_height,s);

var g = TMCT_GetCurrentGesture(0);
//arr[0] = g
//arr[1] = dev0Up
//show_debug_message(arr);
if(dev0Up)
{
    if(g == "LEFT")
    {
        with(TMC_Demo_Character) motion_set(180,4);
    }
    if(g == "RIGHT")
    {
        with(TMC_Demo_Character) motion_set(0,4);
    }
    if(g == "UP")
    {
        with(TMC_Demo_Character) motion_set(90,12);
    }
    if(g == "RUNJUMPL")
    {
        with(TMC_Demo_Character) motion_set(135,12);
    }
    if(g == "RUNJUMPR")
    {
        with(TMC_Demo_Character) motion_set(45,12);
    }
    if(g == "DOWN")
    {
        with(TMC_Demo_Character) hspeed = 0;
    }
    if(g == "")
    {
        with(TMC_Demo_Character) hspeed = 0;
    }
    
}
//Code training hack. this records the segments and makes code for the Name typed and Code generated
//in the demo
if(dev0Up and TMCT_GetSegment(0)!="")
{
    if(os_type  == os_windows and keyboard_string != "") 
    {
        if(!ds_map_find_value(training_map,TMCT_GetSegment(0)))
        {
        var t = 'TMCT_AddGesture("NAME","CODE",true);'
        t = string_replace_all(t,"NAME",keyboard_string);
        t = string_replace_all(t,"CODE",TMCT_GetSegment(0));
        clipboard_set_text(t+chr(13)+chr(10)+clipboard_get_text())
        ds_map_add(training_map,TMCT_GetSegment(0),1);
        }
    }
}
///////////////////////////////////////////////
//After handling
//clear the gestures for all released devices
//if(dev0Up) TMCT_ClearLastGesture(0);
//if(dev1Up) TMCT_ClearLastGesture(1);
//if(dev2Up) TMCT_ClearLastGesture(2);
//if(dev3Up) TMCT_ClearLastGesture(3);
if(dev0Up) TMCT_ClearSegment(0);
if(dev1Up) TMCT_ClearSegment(1);
if(dev2Up) TMCT_ClearSegment(2);
if(dev3Up) TMCT_ClearSegment(3);
if(dev0Up) TMCT_ClearDeviceData(0);
if(dev1Up) TMCT_ClearDeviceData(1);
if(dev2Up) TMCT_ClearDeviceData(2);
if(dev3Up) TMCT_ClearDeviceData(3);
///////////////////////////////////////////////

if(device_mouse_check_button_pressed(0,mb_left)) alarm[0] = -1;
if(dev0Up) 
{
    alarm[0] = room_speed * 2
    last_valid_shape = TMCT_GetCurrentGesture(0);
}
if(alarm[0])
{
    var r = 100;
    var midx = room_width*.5;
    var midy = room_height*.7;
    if(last_valid_shape == "CIRCLE")
    {
        draw_circle(midx,midy,r,1)
    }
    if(last_valid_shape == "SQUARE")
    {
        draw_rectangle(midx-r,midy-r,room_width/2+r,midy+r,1)
    }
    if(last_valid_shape == "RIGHT")
    {
        draw_arrow(midx-r,midy,midx+r,midy,20)
    }
    if(last_valid_shape == "LEFT")
    {
        draw_arrow(midx+r,midy,midx-r,midy,20)
    }
    if(last_valid_shape == "UP")
    {
        draw_arrow(midx,midy+r,midx,midy-r,20)
    }
    if(last_valid_shape == "DOWN")
    {
        draw_arrow(midx,midy-r,midx,midy+r,20)
    }
    if(last_valid_shape == "RUNJUMPL")
    {
        draw_arrow(midx+r,midy+r,midx-r,midy-r,20)
    }
    if(last_valid_shape == "RUNJUMPR")
    {
        draw_arrow(midx-r,midy+r,midx+r,midy-r,20)
    }
    if(last_valid_shape == "L")
    {
        draw_line(midx,midy-r,midx,midy+r)
        draw_arrow(midx,midy+r,midx+r,midy+r,20)
    }
}

if(device_mouse_check_button(0,mb_left))
{
    draw_set_color(c_dkgray);
    var r = 100;
    var midx = room_width*.5;
    var midy = room_height*.7;
    if(TMCT_GetLastGesture(0) == "CIRCLE")
    {
        draw_circle(midx,midy,r,1)
    }
    if(TMCT_GetLastGesture(0) == "SQUARE")
    {
        draw_rectangle(midx-r,midy-r,room_width/2+r,midy+r,1)
    }
    if(TMCT_GetLastGesture(0) == "RIGHT")
    {
        draw_arrow(midx-r,midy,midx+r,midy,20)
    }
    if(TMCT_GetLastGesture(0) == "LEFT")
    {
        draw_arrow(midx+r,midy,midx-r,midy,20)
    }
    if(TMCT_GetLastGesture(0) == "UP")
    {
        draw_arrow(midx,midy+r,midx,midy-r,20)
    }
    if(TMCT_GetLastGesture(0) == "DOWN")
    {
        draw_arrow(midx,midy-r,midx,midy+r,20)
    }
    if(TMCT_GetLastGesture(0) == "RUNJUMPL")
    {
        draw_arrow(midx+r,midy+r,midx-r,midy-r,20)
    }
    if(TMCT_GetLastGesture(0) == "RUNJUMPR")
    {
        draw_arrow(midx-r,midy+r,midx+r,midy-r,20)
    }
    if(TMCT_GetLastGesture(0) == "L")
    {
        draw_line(midx,midy-r,midx,midy+r)
        draw_arrow(midx,midy+r,midx+r,midy+r,20)
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>game_end()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(os_type != os_windows) game_end()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
